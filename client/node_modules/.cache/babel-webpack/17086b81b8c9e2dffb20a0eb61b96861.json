{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-cookie-service\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(httpClient, cookieService) {\n      this.httpClient = httpClient;\n      this.cookieService = cookieService;\n      this.baseUrl = 'http://127.0.0.1:8000/';\n      this.baseProductsUrl = `${this.baseUrl}api/product/`;\n      this.baseProductsonUrl = 'https://my-json-server.typicode.com/SmrutiRanjan-Ai/demo/products/';\n      this.baseOrdersUrl = `${this.baseUrl}api/order/`;\n      this.baseOrdersUserUrl = `${this.baseUrl}api/orders_user/`;\n      this.baseCategorysUrl = `${this.baseUrl}api/category/`;\n      this.baseShippingUrl = `${this.baseUrl}api/shipaddr/`;\n      this.headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n    }\n\n    getOrders() {\n      return this.httpClient.get(this.baseOrdersUrl, {\n        headers: this.getAuthHeaders()\n      });\n    }\n\n    getProducts() {\n      return this.httpClient.get(this.baseProductsUrl, {\n        headers: this.headers\n      });\n    }\n\n    getOrder(id) {\n      return this.httpClient.get(`${this.baseOrdersUrl}${id}/`, {\n        headers: this.headers\n      });\n    }\n\n    getCategories() {\n      return this.httpClient.get(`${this.baseCategorysUrl}`, {\n        headers: this.headers\n      });\n    }\n\n    updateOrder(id, order) {\n      const body = JSON.stringify(order);\n      return this.httpClient.put(`${this.baseOrdersUrl}${id}/`, body, {\n        headers: this.getAuthHeaders()\n      });\n    }\n\n    updateProduct(id, product) {\n      const body = JSON.stringify(product);\n      return this.httpClient.put(`${this.baseProductsUrl}${id}/`, body, {\n        headers: this.getAuthHeaders()\n      });\n    }\n\n    createProduct(product) {\n      const body = JSON.stringify(product);\n      return this.httpClient.post(`${this.baseProductsUrl}`, body, {\n        headers: this.getAuthHeaders()\n      });\n    }\n\n    getProduct(id) {\n      return this.httpClient.get(`${this.baseProductsUrl}${id}/`, {\n        headers: this.headers\n      });\n    }\n\n    registerUser(authData) {\n      const body = JSON.stringify(authData);\n      return this.httpClient.post(`${this.baseUrl}api/account/register/`, body, {\n        headers: this.headers\n      });\n    }\n\n    loginUser(authData) {\n      const body = JSON.stringify(authData);\n      return this.httpClient.post(`${this.baseUrl}api/account/authenticate/`, body, {\n        headers: this.headers\n      });\n    }\n\n    getAuthHeaders() {\n      const token = this.cookieService.get('auth-token');\n      const t = localStorage.getItem('user');\n      let user = null;\n\n      if (t) {\n        user = JSON.parse(t);\n      }\n\n      return new HttpHeaders({\n        'Content-Type': 'application/json',\n        Authorization: `Token ${user.token}`\n      });\n    }\n\n    getUserData() {\n      const userid = this.cookieService.get('userid-token');\n      const username = this.cookieService.get('username-token');\n      const firstname = this.cookieService.get('firstname-token');\n      const lastname = this.cookieService.get('lastname-token');\n      const user = {\n        userid: userid,\n        username: username,\n        firstname: firstname,\n        lastname: lastname\n      };\n      return user;\n    }\n\n    getUserId() {\n      const userid = this.cookieService.get('userid-token');\n      return userid;\n    }\n\n    addToCartSingle(product) {\n      const a = localStorage.getItem(\"cart_item\");\n      let s;\n\n      if (a) {\n        s = JSON.parse(a);\n        console.log(s);\n\n        for (var val in s) {\n          if (s[val].productlist.ProductId == product.ProductId) {\n            s[val].num++;\n            localStorage.setItem(\"cart_item\", JSON.stringify(s));\n            return;\n          }\n        }\n\n        s.push({\n          productlist: product,\n          num: 1\n        });\n        localStorage.setItem(\"cart_item\", JSON.stringify(s));\n      } else {\n        s = [];\n        s.push({\n          productlist: product,\n          num: 1\n        });\n        localStorage.setItem(\"cart_item\", JSON.stringify(s));\n      }\n    }\n\n    getCart() {\n      const a = localStorage.getItem(\"cart_item\");\n\n      if (a !== null) {\n        return JSON.parse(a);\n      } else {\n        return [];\n      }\n    }\n\n    addNum(id) {\n      const a = localStorage.getItem(\"cart_item\");\n      let s;\n\n      if (a) {\n        s = JSON.parse(a);\n\n        for (var val in s) {\n          if (s[val].productlist.ProductId == id) {\n            s[val].num++;\n            localStorage.setItem(\"cart_item\", JSON.stringify(s));\n            return;\n          }\n        }\n      }\n    }\n\n    minusNum(id) {\n      const a = localStorage.getItem(\"cart_item\");\n      let s;\n\n      if (a) {\n        s = JSON.parse(a);\n\n        for (var val in s) {\n          if (s[val].productlist.ProductId == id) {\n            if (s[val].num > 0) {\n              s[val].num--;\n            }\n\n            localStorage.setItem(\"cart_item\", JSON.stringify(s));\n            return;\n          }\n        }\n      }\n    }\n\n    deleteCart() {\n      localStorage.removeItem('cart_item');\n    }\n\n    totalOrderValue() {\n      const OrderItems = this.orderItems();\n      let sum = 0;\n\n      for (var val of OrderItems) {\n        let value = 0;\n\n        if (val.productlist.ProductFeaturedPrice) {\n          value = val.productlist.ProductFeaturedPrice;\n        } else {\n          value = val.productlist.ProductPrice;\n        }\n\n        sum = sum + value;\n      }\n\n      return sum;\n    }\n\n    orderItems() {\n      const a = localStorage.getItem(\"cart_item\");\n      let s;\n      let OrderItems = [];\n\n      if (a) {\n        s = JSON.parse(a);\n\n        for (var val of s) {\n          OrderItems.push({\n            ProductId: val.productlist.ProductId,\n            ProductQuantity: val.num\n          });\n        }\n      }\n\n      return OrderItems;\n    }\n\n    placeOrder() {\n      const OrderItems = this.orderItems();\n      const u = localStorage.getItem('user');\n      let user = null;\n\n      if (u) {\n        user = JSON.parse(u);\n      }\n\n      const order = {\n        OrderFlatShipping: true,\n        OrderTotal: this.totalOrderValue,\n        OrderCustomerId: user.userid,\n        OrderShippingAddress: this.retrieveShipping(),\n        OrderItems: OrderItems\n      };\n      const body = JSON.stringify(order);\n      return this.httpClient.post(`${this.baseOrdersUrl}`, body, {\n        headers: this.getAuthHeaders()\n      });\n    }\n\n    createShippingAddress(data) {\n      const body = JSON.stringify(data);\n      return this.httpClient.post(`${this.baseShippingUrl}`, body, {\n        headers: this.getAuthHeaders()\n      });\n    }\n\n    retrieveShipping() {\n      const ship = localStorage.getItem(\"ship\");\n      let s = null;\n\n      if (ship) {\n        s = JSON.parse(ship);\n      }\n\n      return s.ShippingAddressId;\n    }\n\n    getOrdersByUser() {\n      const u = localStorage.getItem('user');\n      let user = null;\n\n      if (u) {\n        user = JSON.parse(u);\n      }\n\n      return this.httpClient.get(`${this.baseOrdersUserUrl}${user.userid}/`, {\n        headers: this.headers\n      });\n    }\n\n  }\n\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CookieService));\n  };\n\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}